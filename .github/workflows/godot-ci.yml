name: "godot-ci export"
on:
  push:
    branches: [ development ]
  workflow_dispatch:

env:
  GODOT_VERSION: 3.5.1
  EXPORT_NAME: JustThreeBlocks
  PROJECT_PATH: ./
  SCONSFLAGS: verbose=yes warnings=extra werror=yes debug_symbols=no tools=no mono_prefix=.
  EM_VERSION: 1.39.9 # 3.1.18
  EM_CACHE_FOLDER: "emsdk-cache"
  EMSCRIPTEN_ROOT: ~/.emscripten
jobs:
  build:
    name: Export
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Set up build deps
        run: |
          sudo apt-get install build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev libglu-dev libasound2-dev libpulse-dev libfreetype6-dev libssl-dev libudev-dev libxrandr-dev
      - name: Set up libxi-dev
        run: |
          sudo apt-get install libxi-dev
      - name: Set up libgl1 mesa dev
        run: |
          sudo apt-get install libgl1-mesa-dev
      - name: Set up Emscripten latest
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          git pull
          ./emsdk install ${{ env.EM_VERSION }}-upstream
          ./emsdk activate ${{ env.EM_VERSION }}-upstream
          echo 'source "$PWD/emsdk_env.sh"' >> $HOME/.bash_profile
          ln -s $PWD/upstream/emscripten ~/.emscripten
      
      - name: Verify emsdk installed
        run: |
         source $PWD/emsdk/emsdk_env.sh
         emcc -v
          
      - name: Set up mono
        run: |
          source $PWD/emsdk/emsdk_env.sh
          git clone -b mono-6.12.0.198 https://github.com/mono/mono
          export MONO_SOURCE_ROOT=$PWD/mono
          git clone https://github.com/godotengine/godot-mono-builds
          cd godot-mono-builds
          ./wasm.py configure --target=runtime
          ./wasm.py make --target=runtime
      - name: üêç Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: ${{ inputs.python-version }}
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: ${{ inputs.python-arch }}
      
      - name: Link mono installation to where Godot wants it
        run: |
          sudo mkdir -p /root/mono-installs/desktop-linux-x86_64-release/lib
          sudo ln -s /lib/mono /root/mono-installs/desktop-linux-x86_64-release/lib
     
      - name: Clone godot 3.5
        run: |
          git clone -b 3.x https://github.com/godotengine/godot.git godot --single-branch
          cd godot
      - name: Setup scons
        shell: bash
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons==4.4.0
          scons --version
        
      - name: Download Godot 3.5 & create glue
        run: |
          wget https://github.com/godotengine/godot/releases/download/3.5.1-stable/Godot_v3.5.1-stable_mono_linux_headless_64.zip
          unzip -d . Godot_v3.5.1-stable_mono_linux_headless_64.zip
          cd Godot_v3.5.1-stable_mono_linux_headless_64
          chmod +x Godot_v3.5.1-stable_mono_linux_headless.64
          cp Godot_v3.5.1-stable_mono_linux_headless.64 ../godot/
          cd ../godot/
          sudo ./Godot_v3.5.1-stable_mono_linux_headless.64 --generate-mono-glue ./modules/mono/glue

      - name: Scons Build godot template
        # just continue working so I can see what happened
        # continue-on-error: true
        env:
            SCONSFLAGS: ${{ env.SCONSFLAGS }}
            SCONS_CACHE: ${{ inputs.scons-cache }}
            SCONS_CACHE_LIMIT: ${{ inputs.scons-cache-limit }}
        run: |
          export SCONS_CACHE="${{ github.workspace }}/.scons-cache/"
          mv custom.py godot/
          cd godot/
          echo "Building with flags:" platform=javascript target=release tests=false ${{ env.SCONSFLAGS }}
          if [ "${{ inputs.target }}" != "editor" ]; then rm -rf editor; fi  # Ensure we don't include editor code.
          scons profile=custom.py platform=javascript target=release tests=false ${{ env.SCONSFLAGS }}
          ls -l bin/
        
      - name: üç∑ Setup WINE
        id: wine_install
        run: |
          sudo apt-get install wine
          echo "WINE_PATH=$(which wine64)" >> $GITHUB_OUTPUT
          
      - name: Get tag from version
        id: tag_version
        run: |
          echo "TAG_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - name: üì§ Export game
        id: export
        # Use latest version (see releases for all versions)
        uses: firebelley/godot-export@v4.7.0
        with:
          # Defining all the required inputs
          godot_executable_download_url: https://github.com/godotengine/godot/releases/download/3.5.1-stable/Godot_v3.5.1-stable_mono_linux_headless_64.zip
          godot_export_templates_download_url: https://github.com/godotengine/godot/releases/download/3.5.1-stable/Godot_v3.5.1-stable_mono_export_templates.tpz
          relative_project_path: ./
          archive_output: true
          export_debug: false
          wine_path: ${{ steps.wine_install.outputs.WINE_PATH }}
          
      - name: ü§ê Unzip build artifacts
        run: |
          mkdir ./artifacts
          unzip -qq ${{ steps.export.outputs.archive_directory }}/HTML5.zip -d ./artifacts/HTML5
      
      - name: üöö Move license info into output directory
        run: |
          cp GODOT_LICENSE.txt ./artifacts/HTML5/
          cp LICENSE ./artifacts/HTML5
      - name: üöö Move lively metadata into output directory
        run: |
          cp lively/* ./artifacts/HTML5/
      - name: ‚¨Ü Upload HTML5 Artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.EXPORT_NAME }}-HTML5
          path: ./artifacts/HTML5
